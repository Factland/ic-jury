type Kind = { Add; Remove; Select; Expand; }
type Data = record {
  kind: Kind;
  jurors: vec blob;
  rand: opt blob; // Only present for Jury/Expand.
  jurors_index: nat32; // Only used for Jury/Expand.
};
type Block = record {
  // Certificate is signed by the NNS root key and contains the root of tree.
  certificate: blob;
  // Under b"jury_block is sha256(serialize(data)).
  tree: blob;
  data: Data;
  previous_hash: blob;
};

service jury: (opt text) {
  //
  // Juror pool and jury operations
  //
  // Stage an Add Block and return the future log index.
  add: (jurors: vec blob) -> (nat32);
  // Stage a Remove and return the future log index.
  remove: (jurors: vec blob) -> (nat32);
  // Stage a Jury Block and return the future log index.
  select: (index: nat32, count: nat32) -> (nat32);
  // Stage an Expand Block and return the future log index.
  // The selected jury uses the same random number as the given 'index'.
  expand: (index: nat32, more: nat32) -> (nat32);

  //
  // Certification and operation log commit
  //
  // Get certificate for the certified data for the staged Block(s).
  // Returns None if nothing is staged.
  get_certificate: () -> (opt blob) query;
  // Commit the staged Block returning None if nothing is staged.
  commit: (certificate: blob) -> (opt nat32);
                              
  //
  // State accessors
  //
  // Return the size of the set of jurors at a log index.
  get_size: (index: nat32) -> (nat32) query;
  // Return the current log index including any pending Block(s).
  get_index: () -> (nat32) query;
  // Return the number of pending Block(s).
  get_pending: () -> (nat32) query;
  // Get a Block.
  get_block: (index: nat32) -> (Block) query;
  // Return the juror's merkle tree root hash at a log index.
  root_hash: (index: nat32) -> (blob) query;
  // Return a span of jurors (merkel tree leaves) at a log index.
  get_jurors: (index: nat32, start: nat32, len: nat32) -> (vec blob) query;
  // Find the indexes of the jurors in the merkel tree leaves at a log index.
  find: (index: nat32, juror: vec blob) -> (vec opt nat32) query;
  // Return a proof for a vec of juror indexes (left to right, bottom to top hashes) at a log index.
  proof: (index: nat32, jurors: vec nat32) -> (vec blob) query;

  //
  // Manage the set of Principals allowed to stage and commit Blocks.
  //
  authorize: (principal) -> ();
  deauthorize: (principal) -> ();
  get_authorized: () -> (vec principal) query;
}
